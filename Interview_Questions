# reverse a string
def reverse(string):
    rev_str=""
    for i in string:
        rev_str=i+rev_str  #concatenating the elements to the rev_str
    print("Reversed string:",rev_str)
string = input("Enter a string:")
print("Entered string",string)
reverse(string)

===============================================================================================================================================================================
# sort a list using bubblesort
def sort(nums):
    for i in range(len(nums)-1,0,-1):
        for j in range(i):
            if nums[j] > nums[j+1]:
                temp = nums[j]
                nums[j] = nums[j+1]
                nums[j+1] = temp
nums = [5,3,8,6,7,2]
sort(nums)
print(nums)
============================================================================================================================================================================
# sort a list using mergesort
# Mergesort follows divide and conquer technique
def mergesort(list1):
    # divide the list into sublists untill it consists of single element
    if len(list1)>1:
        mid = len(list1)//2
        left_list = list1[:mid]
        right_list = list1[mid:]
        mergesort(left_list)  # function calls recursively until left_list divide into sublists consists of 1 element
        mergesort(right_list)  # function calls recursively until right_list divide into sublists consists of 1 element
    #comapare the sublists and merge them into a list 
        i = 0
        j = 0
        k = 0
        while i<len(left_list) and j<len(right_list):
            if left_list[i] < right_list[j]:
                list1[k] = left_list[i]
                i += 1
                k += 1
            else:
                list1[k] = right_list[j]
                j += 1
                k +=1
        # left element needs to append to the list from left_list or right_list 
        while len(left_list)>i:
            list1[k] = left_list[i]
            i += 1
            k +=1
        while len(right_list)>j:
            list1[k] = right_list[j]
            j += 1
            k += 1
            
num = int(input("How many elements do you want in a list:"))
list1 = [int(input()) for x in range(num)]
mergesort(list1)
print("sorted list is:",list1)
===========================================================================================================================================================================
#sort a list using (quicksort)
#To get the correct position of the pivot element
def pivot_position(list1,first,last):
    pivot = list1[first]
    left = first+1
    right = last
    while True:
        while left <= right and list1[left] <= pivot:
            left =left+1
        while left <= right and list1[right] >= pivot:
            right = right-1
        if left>right:
            break
        else:
            list1[left],list1[right] = list1[right],list1[left]
    list1[first],list1[right] = list1[right],list1[first]
    return right
# define a function to call recursively
def quicksort(list1,first,last):
    if first<last:
        p = pivot_position(list1,first,last)
        quicksort(list1,first,p-1)
        quicksort(list1,p+1,last)
        
#Drivercode
list1 = [5,3,8,6,7,2]
n = len(list1)
quicksort(list1,0,n-1)
print(list1)
==========================================================================================================================================================================
# Python program for implementation of Radix Sort
# A function to do counting sort of arr[] according to
# the digit represented by exp.
 
def countingSort(arr, exp1):
 
    n = len(arr)
 
    # The output array elements that will have sorted arr
    output = [0] * (n)
 
    # initialize count array as 0
    count = [0] * (10)
 
    # Store count of occurrences in count[]
    for i in range(0, n):
        index = (arr[i] / exp1)
        count[int(index % 10)] += 1
 
    # Change count[i] so that count[i] now contains actual
    # position of this digit in output array
    for i in range(1, 10):
        count[i] += count[i - 1]
 
    # Build the output array
    i = n - 1
    while i >= 0:
        index = (arr[i] / exp1)
        output[count[int(index % 10)] - 1] = arr[i]
        count[int(index % 10)] -= 1
        i -= 1
 
    # Copying the output array to arr[],
    # so that arr now contains sorted numbers
    i = 0
    for i in range(0, len(arr)):
        arr[i] = output[i]
 
# Method to do Radix Sort
def radixSort(arr):
 
    # Find the maximum number to know number of digits
    max1 = max(arr)
 
    # Do counting sort for every digit. Note that instead
    # of passing digit number, exp is passed. exp is 10^i
    # where i is current digit number
    exp = 1
    while max1 / exp > 0:
        countingSort(arr, exp)
        exp *= 10
 
 
# Driver code
arr = [170, 45, 75, 90, 802, 24, 2, 66]
 
# Function Call
radixSort(arr)
print(arr)
 
================================================================================================================================================================================
# Given N random numbers search for a number in the list of N random numbers (Binary search)
# Binary search is always performed on sorted list
def BinarySearch(list1,key):
    low = 0
    high = len(list1)-1
    while low<= high:
        mid = (low+high)//2
        if key == list1[mid]:
            return mid
        elif key>list1[mid]:
            low = mid+1
        else:
            high = mid-1
    return -1
      
list1 = [5,3,8,6,7,2]
list1.sort()
print(list1)
key = int(input("Enter Key:"))
BinarySearch(list1,8)
==================================================================================================================================================================
#python program that displays numbers in right angled triangular form (Using for loop)
# Take the Input From the User
rows = int(input("Enter the total Number of Rows: "))

# Print the Output
print("Right Triangle Pattern of Numbers")

for i in range(1, rows + 1):  #displays number of rows
    for j in range(1, i + 1):  #row number
        print('%d' %i, end = '  ')
    print()
 ======================================================================================================================================================================
 #python program that displays numbers in left angled triangular form (Using for loop)
n = int(input("Enter total number of rows:"))
for i in range(n):
    for j in range(n-i-1):
        print(" ",end =" ")
    for j in range(0,i+1):
        print(i+1,end = " ")
    print() 
  =========================================================================================================================================================================
           
            
            
            
