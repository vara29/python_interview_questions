#sort a list using (quicksort)
#To get the correct position of the pivot element
def pivot_position(list1,first,last):
    pivot = list1[first]
    left = first+1
    right = last
    while True:
        while left <= right and list1[left] <= pivot:
            left =left+1
        while left <= right and list1[right] >= pivot:
            right = right-1
        if left>right:
            break
        else:
            list1[left],list1[right] = list1[right],list1[left]
    list1[first],list1[right] = list1[right],list1[first]
    return right
# define a function to call recursively
def quicksort(list1,first,last):
    if first<last:
        p = pivot_position(list1,first,last)
        quicksort(list1,first,p-1)
        quicksort(list1,p+1,last)
        
#Drivercode
list1 = [5,3,8,6,7,2]
n = len(list1)
quicksort(list1,0,n-1)
print(list1)
=========================================================================================================================================================================
# Python program for implementation of( Radix Sort)
# A function to do counting sort of arr[] according to
# the digit represented by exp.
 
def countingSort(arr, exp1):
 
    n = len(arr)
 
    # The output array elements that will have sorted arr
    output = [0] * (n)
 
    # initialize count array as 0
    count = [0] * (10)
 
    # Store count of occurrences in count[]
    for i in range(0, n):
        index = (arr[i] / exp1)
        count[int(index % 10)] += 1
 
    # Change count[i] so that count[i] now contains actual
    # position of this digit in output array
    for i in range(1, 10):
        count[i] += count[i - 1]
 
    # Build the output array
    i = n - 1
    while i >= 0:
        index = (arr[i] / exp1)
        output[count[int(index % 10)] - 1] = arr[i]
        count[int(index % 10)] -= 1
        i -= 1
 
    # Copying the output array to arr[],
    # so that arr now contains sorted numbers
    i = 0
    for i in range(0, len(arr)):
        arr[i] = output[i]
 
# Method to do Radix Sort
def radixSort(arr):
 
    # Find the maximum number to know number of digits
    max1 = max(arr)
 
    # Do counting sort for every digit. Note that instead
    # of passing digit number, exp is passed. exp is 10^i
    # where i is current digit number
    exp = 1
    while max1 / exp > 0:
        countingSort(arr, exp)
        exp *= 10
 
 
# Driver code
arr = [170, 45, 75, 90, 802, 24, 2, 66]
 
# Function Call
radixSort(arr)
print(arr)
=========================================================================================================================================================================
# Given N random numbers search for a number in the list of N random numbers (linear search)
my_nums = [5,3,8,6,7,2]
num = 8
flag = False
for element in my_nums:
    if element == num:
        print("Number is found")
        flag = True
        break
if (flag == False):
    print("Number not found")
 
